{"version":3,"sources":["localStorage.js","components/TodoItem.tsx","components/TodoList.tsx","components/TodosFilter.tsx","components/TodoForm.tsx","App.tsx","index.tsx"],"names":["setLocalStorage","key","value","localStorage","setItem","JSON","stringify","TodoItem","completedChange","todo","handleRemove","handleTodoEdit","useState","editMode","setEditMode","title","editTitle","setEditTitle","onDoubleClick","className","classNames","completed","editing","type","checked","onChange","onClick","onKeyUp","keyCode","length","event","currentTarget","TodoList","todos","toggleAllTodos","handleCompletedChange","id","htmlFor","style","cursor","map","item","TodosFilter","onFilterChange","href","TodoForm","handleSubmit","inputValue","setInputValue","onSubmit","placeholder","App","todoList","setTodoList","allTodos","setAllTodos","filter","setFilter","useEffect","parse","getItem","completedTodos","visibleTodos","preventDefault","newTodo","Date","prevState","toggledAllState","newState","ReactDOM","render","document","getElementById"],"mappings":"qPAIaA,EAAkB,SAACC,EAAKC,GACnC,OAAOC,aAAaC,QAAQH,EAAKI,KAAKC,UAAUJ,K,uBCKrCK,EAA4B,SAAC,GAKnC,IAJLC,EAII,EAJJA,gBACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,aACAC,EACI,EADJA,eAEA,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAASH,EAAKM,OAAhD,mBAAOC,EAAP,KAAkBC,EAAlB,KAMA,OACE,mCACE,qBACEC,cAPa,WACjBJ,GAAY,IAORK,UACEC,IAAW,CACTC,UAAWZ,EAAKY,UAChBC,QAAST,IALf,UASE,sBAAKM,UAAU,OAAf,UACE,uBACEI,KAAK,WACLJ,UAAU,SACVK,QAASf,EAAKY,UACdI,SAAU,WACRjB,EAAgBC,MAIpB,gCACGA,EAAKM,QAGR,wBACEQ,KAAK,SACLJ,UAAU,UACVO,QAAS,kBAAMhB,EAAaD,SAGhC,uBACEc,KAAK,OACLrB,MAAOc,EACPG,UAAU,OACVQ,QAAS,YAAkB,IAAfC,EAAc,EAAdA,QACNZ,EAAUa,OAAS,GAAiB,KAAZD,GAC1BjB,EAAeF,EAAMO,GACrBF,GAAY,IACS,KAAZc,GACTd,GAAY,IAGhBW,SAAU,SAAAK,GAAK,OAAIb,EAAaa,EAAMC,cAAc7B,gBCvDjD8B,EAA4B,SAAC,GAMnC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,eACAxB,EAGI,EAHJA,aACAC,EAEI,EAFJA,eACAwB,EACI,EADJA,sBAEA,OACE,0BAAShB,UAAU,OAAnB,UACE,uBACEI,KAAK,WACLa,GAAG,aACHX,SAAUS,EACVf,UAAU,eAGZ,uBACEkB,QAAQ,aACRC,MAAO,CAAEC,OAAQ,WAFnB,kCAOA,oBAAIpB,UAAU,YAAd,SACGc,EAAMO,KAAI,SAAAC,GACT,OACE,cAAC,EAAD,CACEjC,gBAAiB2B,EACjB1B,KAAMgC,EAEN/B,aAAcA,EACdC,eAAgBA,GAFX8B,EAAKL,aClCXM,EAA+B,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAC7C,OACE,qBAAIxB,UAAU,UAAd,UACE,6BACE,mBACEyB,KAAK,KACLlB,QAAS,WACPiB,EAAe,QAEjBxB,UAAU,WALZ,mBAWF,6BACE,mBACEyB,KAAK,WACLlB,QAAS,WACPiB,EAAe,WAHnB,sBAUF,6BACE,mBACEC,KAAK,cACLlB,QAAS,WACPiB,EAAe,cAHnB,6BCzBKE,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,aACAC,EAEI,EAFJA,WACAC,EACI,EADJA,cAEA,OACE,yBAAQ7B,UAAU,SAAlB,UACE,uCAEA,sBAAM8B,SAAUH,EAAhB,SACE,uBACEvB,KAAK,OACLJ,UAAU,WACV+B,YAAY,yBACZhD,MAAO6C,EACPtB,SAAU,SAACK,GAAD,OAAWkB,EAAclB,EAAMC,cAAc7B,gBC6IlDiD,EA9JO,WACpB,MAAoCvC,mBAAS,IAA7C,mBAAOmC,EAAP,KAAmBC,EAAnB,KACA,EAAgCpC,mBAAiB,IAAjD,mBAAOwC,EAAP,KAAiBC,EAAjB,KACA,EAAgCzC,oBAAkB,GAAlD,mBAAO0C,EAAP,KAAiBC,EAAjB,KACA,EAA4B3C,mBAAiB,OAA7C,mBAAO4C,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WLZmB,IAACzD,EKa5BoD,GLb4BpD,EKaA,QLZvBI,KAAKsD,MAAMxD,aAAayD,QAAQ3D,KKYG,OACvC,IAEH,IAqFM4D,EAAiBT,EAASI,QAAO,SAAAf,GAAI,OAAKA,EAAKpB,aAE/CyC,EAA0B,QAAXN,EACjBJ,EACAA,EAASI,QAAO,SAAAf,GAChB,MAAe,WAAXe,GACMf,EAAKpB,UAGRoB,EAAKpB,aAahB,OACE,0BAASF,UAAU,UAAnB,UACE,cAAC,EAAD,CACE2B,aA9Ge,SAAChB,GAGpB,GAFAA,EAAMiC,iBAEFhB,EAAWlB,OAAS,EAAG,CACzB,IACMmC,EAAU,CACd5B,IAFa,IAAI6B,KAGjBlD,MAAOgC,EACP1B,WAAW,GAGbgC,GAAY,SAAAa,GAGV,OAFAlE,EAAgB,QAAD,sBAAckE,GAAd,CAAyBF,KAElC,GAAN,mBAAWE,GAAX,CAAsBF,OAGxBhB,EAAc,MA8FZD,WAAYA,EACZC,cAAeA,IAGjB,cAAC,EAAD,CACEf,MAAO6B,EACP5B,eAhDiB,WACrBqB,GAAaD,GACbD,GAAY,SAAAa,GACV,IAAMC,EAAkBD,EAAU1B,KAAI,SAAAC,GACpC,OAAO,2BACFA,GADL,IAEEpB,UAAWiC,OAMf,OAFAtD,EAAgB,QAASmE,GAElBA,MAqCLzD,aA9Ee,SAACD,GACpB4C,GAAY,SAAAa,GACV,IAAME,EAAWF,EAAUV,QAAO,SAAAf,GAAI,OAAIA,EAAKL,KAAO3B,EAAK2B,MAI3D,OAFApC,EAAgB,QAASoE,GAElBA,MAyELzD,eArEiB,SAACF,EAAYO,GAClCqC,GAAY,SAAAa,GACV,IAAME,EAAWF,EAAU1B,KAAI,SAAAC,GAC7B,OAAIA,EAAKL,KAAO3B,EAAK2B,GACZ,2BACF3B,GADL,IAEEM,MAAOC,IAIJyB,KAKT,OAFAzC,EAAgB,QAASoE,GAElBA,MAuDLjC,sBAnGwB,SAAC1B,GAC7B4C,GAAY,SAAAa,GACV,IAAME,EAAWF,EAAU1B,KAAI,SAAAC,GAC7B,OAAIA,EAAKL,KAAO3B,EAAK2B,GACZ,2BACF3B,GADL,IAEEY,WAAYZ,EAAKY,YAIdoB,KAKT,OAFAzC,EAAgB,QAASoE,GAElBA,QAuFP,yBAAQjD,UAAU,SAAlB,UACG0C,EAAehC,OAAS,GACvB,uBAAMV,UAAU,aAAhB,UACG0C,EAAehC,OACf,IAFH,gBAOF,cAAC,EAAD,CACEc,eAAgBc,IAGlB,wBACElC,KAAK,SACLJ,UAAU,kBACVO,QA1CgB,WACtB2B,GAAY,SAAAa,GACV,IAAME,EAAWF,EAAUV,QAAO,SAAAf,GAAI,OAAKA,EAAKpB,aAIhD,OAFArB,EAAgB,QAASoE,GAElBA,MAiCL,oCC/IRC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.00fee6a0.chunk.js","sourcesContent":["export const getLocalStorage = (key) => {\n  return JSON.parse(localStorage.getItem(key));\n};\n\nexport const setLocalStorage = (key, value) => {\n  return localStorage.setItem(key, JSON.stringify(value));\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  completedChange: (todo: Todo) => void;\n  todo: Todo;\n  handleRemove: (todo: Todo) => void;\n  handleTodoEdit: (todo: Todo, editTitle: string) => void;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  completedChange,\n  todo,\n  handleRemove,\n  handleTodoEdit,\n}) => {\n  const [editMode, setEditMode] = useState(false);\n  const [editTitle, setEditTitle] = useState(todo.title);\n\n  const changeMode = () => {\n    setEditMode(true);\n  };\n\n  return (\n    <>\n      <li\n        onDoubleClick={changeMode}\n        className={\n          classNames({\n            completed: todo.completed,\n            editing: editMode,\n          })\n        }\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={todo.completed}\n            onChange={() => {\n              completedChange(todo);\n            }}\n          />\n          {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n          <label>\n            {todo.title}\n          </label>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => handleRemove(todo)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          value={editTitle}\n          className=\"edit\"\n          onKeyUp={({ keyCode }) => {\n            if (editTitle.length > 0 && keyCode === 13) {\n              handleTodoEdit(todo, editTitle);\n              setEditMode(false);\n            } else if (keyCode === 27) {\n              setEditMode(false);\n            }\n          }}\n          onChange={event => setEditTitle(event.currentTarget.value)}\n        />\n      </li>\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from './TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  toggleAllTodos: () => void;\n  handleRemove: (todo: Todo) => void;\n  handleTodoEdit: (todo: Todo, editTitle: string) => void;\n  handleCompletedChange: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  toggleAllTodos,\n  handleRemove,\n  handleTodoEdit,\n  handleCompletedChange,\n}) => {\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        onChange={toggleAllTodos}\n        className=\"toggle-all\"\n      />\n      {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n      <label\n        htmlFor=\"toggle-all\"\n        style={{ cursor: 'pointer' }}\n      >\n        Mark all as complete\n      </label>\n\n      <ul className=\"todo-list\">\n        {todos.map(item => {\n          return (\n            <TodoItem\n              completedChange={handleCompletedChange}\n              todo={item}\n              key={item.id}\n              handleRemove={handleRemove}\n              handleTodoEdit={handleTodoEdit}\n            />\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  onFilterChange: (filter: string) => void;\n};\n\nexport const TodosFilter: React.FC<Props> = ({ onFilterChange }) => {\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          onClick={() => {\n            onFilterChange('all');\n          }}\n          className=\"selected\"\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          onClick={() => {\n            onFilterChange('active');\n          }}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          onClick={() => {\n            onFilterChange('completed');\n          }}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  handleSubmit: (event: React.FormEvent) => void;\n  inputValue: string;\n  setInputValue: (inputValue: string) => void;\n};\n\nexport const TodoForm: React.FC<Props> = ({\n  handleSubmit,\n  inputValue,\n  setInputValue,\n}) => {\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={inputValue}\n          onChange={(event) => setInputValue(event.currentTarget.value)}\n        />\n      </form>\n    </header>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { getLocalStorage, setLocalStorage } from './localStorage';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\nimport { TodoForm } from './components/TodoForm';\n\nconst App: React.FC = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [todoList, setTodoList] = useState<Todo[]>([]);\n  const [allTodos, setAllTodos] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>('all');\n\n  useEffect(() => {\n    setTodoList(getLocalStorage('todos') || []);\n  }, []);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (inputValue.length > 0) {\n      const newId = +new Date();\n      const newTodo = {\n        id: newId,\n        title: inputValue,\n        completed: false,\n      };\n\n      setTodoList(prevState => {\n        setLocalStorage('todos', [...prevState, newTodo]);\n\n        return [...prevState, newTodo];\n      });\n\n      setInputValue('');\n    }\n  };\n\n  const handleCompletedChange = (todo: Todo) => {\n    setTodoList(prevState => {\n      const newState = prevState.map(item => {\n        if (item.id === todo.id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return item;\n      });\n\n      setLocalStorage('todos', newState);\n\n      return newState;\n    });\n  };\n\n  const handleRemove = (todo: Todo) => {\n    setTodoList(prevState => {\n      const newState = prevState.filter(item => item.id !== todo.id);\n\n      setLocalStorage('todos', newState);\n\n      return newState;\n    });\n  };\n\n  const handleTodoEdit = (todo: Todo, editTitle: string) => {\n    setTodoList(prevState => {\n      const newState = prevState.map(item => {\n        if (item.id === todo.id) {\n          return {\n            ...todo,\n            title: editTitle,\n          };\n        }\n\n        return item;\n      });\n\n      setLocalStorage('todos', newState);\n\n      return newState;\n    });\n  };\n\n  const toggleAllTodos = () => {\n    setAllTodos(!allTodos);\n    setTodoList(prevState => {\n      const toggledAllState = prevState.map(item => {\n        return {\n          ...item,\n          completed: allTodos,\n        };\n      });\n\n      setLocalStorage('todos', toggledAllState);\n\n      return toggledAllState;\n    });\n  };\n\n  const completedTodos = todoList.filter(item => !item.completed);\n\n  const visibleTodos = filter === 'all'\n    ? todoList\n    : todoList.filter(item => {\n      if (filter === 'active') {\n        return !item.completed;\n      }\n\n      return item.completed;\n    });\n\n  const completedRemove = () => {\n    setTodoList(prevState => {\n      const newState = prevState.filter(item => !item.completed);\n\n      setLocalStorage('todos', newState);\n\n      return newState;\n    });\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <TodoForm\n        handleSubmit={handleSubmit}\n        inputValue={inputValue}\n        setInputValue={setInputValue}\n      />\n\n      <TodoList\n        todos={visibleTodos}\n        toggleAllTodos={toggleAllTodos}\n        handleRemove={handleRemove}\n        handleTodoEdit={handleTodoEdit}\n        handleCompletedChange={handleCompletedChange}\n      />\n\n      <footer className=\"footer\">\n        {completedTodos.length > 0 && (\n          <span className=\"todo-count\">\n            {completedTodos.length}\n            {' '}\n            items left\n          </span>\n        )}\n\n        <TodosFilter\n          onFilterChange={setFilter}\n        />\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={completedRemove}\n        >\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}